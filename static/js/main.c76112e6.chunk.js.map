{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","cardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","Header","Component","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","requestRobotsAction","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yRAkBeA,MAdf,YAAmC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAAOC,EAAK,EAALA,GAIzB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,6BACI,4BAAKL,GACL,2BAAIC,MCYLK,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAChC,OACI,kBAAC,EAAD,CAEAC,IAAKD,EACLT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAIzB,OACI,6BACKO,ICJEK,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKX,UAAU,OACX,2BACIA,UAAY,mCACZY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,UAC9DJ,EAAMK,SADX,MCIOC,E,iLAJP,OAAO,+C,GAFMC,aC2BfC,E,4LAEEC,KAAKT,MAAMU,oB,+BAGN,IAAD,EACsDD,KAAKT,MAAvDW,EADJ,EACIA,YAAaC,EADjB,EACiBA,eAAgBxB,EADjC,EACiCA,OAAQyB,EADzC,EACyCA,UAEvCC,EAAiB1B,EAAO2B,QAAO,SAAAC,GACjC,OAAOA,EAAMnC,KAAKoC,cAAcC,SAASP,EAAYM,kBAEzD,OAAIJ,EACO,8CAGH,yBAAK7B,UAAU,MACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWW,aAAciB,IACzB,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUxB,OAAQ0B,U,GAnBxBP,aA2BHY,eA5CS,SAACC,GACrB,MAAO,CACHT,YAAcS,EAAMC,aAAaV,YACjCvB,OAAQgC,EAAME,cAAclC,OAC5ByB,UAAWO,EAAME,cAAcT,UAC/BU,MAAOH,EAAME,cAAcC,UAMR,SAACC,GACxB,MAAO,CACHZ,eAAgB,SAACa,GAAD,OAAWD,ECfxB,CACH5B,KCX2B,sBDY3B8B,QDamDD,EAAME,OAAOC,SAChElB,gBAAiB,kBCLU,SAACc,GAChCA,EAAS,CAAE5B,KCrBuB,2BDsBlCiC,MAAM,8CACLC,MAAK,SAAAC,GAAa,OAAOA,EAASC,UAClCF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CAAE5B,KCvBS,yBDuBqB8B,QAASO,OAC/DC,OAAM,SAAAC,GAAG,OAAIX,EAAS,CAAE5B,KCvBQ,wBDuBqB8B,QAASS,ODApCC,CAAoBZ,OA8BpCL,CAA6CX,GG7CxC6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCVAC,EAAqB,CACvB/B,YAAa,IAmBXgC,EAAqB,CACvB9B,WAAY,EACZzB,OAAS,GACTmC,MAAQ,ICTNqB,EAASC,yBAETC,EAAcC,YAAgB,CAAE1B,aDNV,WAA8C,IAA7CD,EAA4C,uDAApCsB,EAAoBM,EAAgB,uDAAP,GAC9D,OAAOA,EAAOpD,MACV,IFnB2B,sBEoBvB,OAAOqD,OAAOC,OAAO,GAAI9B,EAAO,CAACT,YAAaqC,EAAOtB,UACzD,QACI,OAAON,ICCiCE,cDevB,WAA8C,IAA7CF,EAA4C,uDAApCuB,EAAoBK,EAAgB,uDAAP,GAC/D,OAAOA,EAAOpD,MACV,IFvC8B,yBEwC1B,OAAOqD,OAAOC,OAAO,GAAI9B,EAAO,CAACP,WAAW,IAChD,IFxC8B,yBEyC1B,OAAOoC,OAAOC,OAAO,GAAI9B,EAAO,CAAChC,OAAQ4D,EAAOtB,QAAUb,WAAW,IACzE,IFzC6B,wBE0CzB,OAAOoC,OAAOC,OAAO,GAAI9B,EAAO,CAACG,MAAOyB,EAAOtB,QAASb,WAAW,IACvE,QACI,OAAOO,MCrBb+B,EAAQC,YAAYN,EAAcO,YAAgBC,IAAgBV,IAGxEW,IAASC,OAAO,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,OACSM,SAASC,eAAe,SFiG/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.c76112e6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// curly brackets stand for js expressions\r\n// simplest way of destructuring (directly from the parameter)\r\nfunction Card ({name, email, id}) {\r\n    // simpler way of destructuring (review ES6)\r\n    // same as const {name, email, id} = props;\r\n    // Card function can only return one element\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","// CardList is a component that contains all the cards\r\nimport React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n// dumb/pure components dont need to know anything other than the fact\r\n// that they are pure functions that receive something and return something\r\nconst CardList = ({robots}) => {\r\n    const cardArray = robots.map((user, i) =>{\r\n        return (\r\n            <Card \r\n            // every time a loop is executed there must be a key for the component\r\n            key={i} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email} \r\n            />\r\n            );\r\n    })\r\n    return (\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                className = 'pa3 ba b--green bg-lightest-blue' \r\n                type='search' \r\n                placeholder='search robots'\r\n                onChange={searchChange}/>\r\n        </div>\r\n        \r\n\r\n    );\r\n}\r\n\r\nexport default SearchBox; ","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border:'5px solid black', height:'800px'}}>\r\n            {props.children};\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\n\r\nclass Header extends Component {\r\n    render(){\r\n        return <h2>Robofriends</h2>\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\n/* connect method makes the component redux aware */\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport Header from '../components/Header';\r\nimport { setSearchField, requestRobotsAction} from '../actions';\r\n//import {robots} from './robots'; //destructure needed because it could be multiple variables in robots.js\r\n// if there were multiple objects it would be import {robots, cats} from './robots'\r\n\r\n// App.js inherits the state object provided by Provider in index.js this is implicit \r\n// in the call to mapStateProps in the bottom line of this file\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField:  state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n// App.js inherits the dispatch provided by Provider in index.js due to the redux implementation\r\n// this is implicit in the call to mapDispatchToProps in the bottom line of this file\r\n// in this function we return the functions that contain the actions within them\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => requestRobotsAction(dispatch) \r\n    }\r\n}\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render(){\r\n        const { searchField, onSearchChange, robots, isPending} = this.props;\r\n        \r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        if (isPending){\r\n            return <h1>Loading Robots</h1>\r\n        } else {\r\n            return (\r\n                <div className=\"tc\">\r\n                    <Header />\r\n                    <SearchBox searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots} />\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n        \r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED } \r\nfrom \"./constants\";\r\n/**\r\n * setSearch field pure function returns an object with the type of action and the payload text\r\n * @param {*} text the text to return in the object\r\n */\r\nexport const setSearchField = (text) => {\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text     \r\n    }\r\n}\r\n/**\r\n * requestRobotsAction first dispatches the pending state, then fetchs an url and manages the response\r\n * this is possible due to the redux-thunk library, where requestRobotsAction returns not an object\r\n * but another function:  (dispatch)\r\n * @param {*} dispatch the dispatch method to dispatch the different objects\r\n */\r\nexport const requestRobotsAction = (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => {return response.json();})\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err}));\r\n}","/* constants.js saves the constants names which are the types of the actions.js and that are also used by the reducer  to update store*/\r\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED } \r\nfrom \"./constants\";\r\n\r\n/* declaration of the initialStateSeatch state object */\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\n/**\r\n * searchRobots updates the initialStateSearch according to the result of the setSearchField action in actions.js\r\n * a function provided in the action parameter\r\n * @param {*} state the initial state declared on top\r\n * @param {*} action the action to reduce\r\n */\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n/* declaration of the initialStateRobots state object */\r\nconst initialStateRobots = {\r\n    isPending : false,\r\n    robots : [],\r\n    error : ''\r\n}\r\n\r\n/**\r\n * request robots updates the initialStateRobots object according to the requestRobotAction action in actions.js\r\n * @param {*} state the initialStateRobots\r\n * @param {*} action the action to reduce\r\n */\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload , isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n/* Provider allows us to englobe App Container and pass down props in a redux model */\nimport { Provider } from 'react-redux';\n\n/* createStore allows us to create a store with a given reducer and a middleware*/\n/* combineReducers is used when an application has multiple reducers */\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n\n/* createLogger allows us to control the redux actions in the console */\nimport { createLogger } from 'redux-logger';\n\n// thunkMiddleware allows us to control  redux Async actions and manage them\nimport thunkMiddleware from 'redux-thunk';\n\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\n/* intance of the logger */\nconst logger = createLogger();\n// in order to use multiple reducers we have to create a rootReducer by calling combineReducers function\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n// The store A.K.A. the state of the app is declared with the root reducer, and as\n// an optional second parameter we can pass a middleware, to keep track of the actions\nconst store = createStore(rootReducer,  applyMiddleware(thunkMiddleware,logger));\n\n/* wrapping the App within the Provider component passes down the store in all the other components contained in the App Component */\nReactDOM.render(<Provider store={store}>\n                    <App />\n                </Provider>, document.getElementById('root'));\n             \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}